/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface FoliaButton {
    'color': 'primary' | 'accent' | 'light';
    'shape': 'square' | 'round';
    'size': 'small' | 'default' | 'large';
    /**
    * Internal props (context and connect) Inlined decorator.  Using reflectToAttr makes sure our disabled prop stays in sync with an HTML attribute.
    */
    'type': 'button' | 'reset' | 'success' | 'error' | 'submit' | 'loading';
  }
  interface FoliaItem {
    'description': string;
    'label': string;
  }
  interface FoliaTab {
    'active': boolean;
    'disabled': boolean;
    'label': string;
  }
  interface FoliaTabs {
    /**
    * @param index listen to this event outside of this component and react to it as follows: const tabs = document.querySelector('mtn-tabs'); tabs.addEventListener('change', event => { // the emitted object will be under event.detail console.log(`CHANGED TABS TO INDEX ${event.detail.tabId}`); });
    */
    'openTab': (index: number) => Promise<void>;
  }
}

declare global {


  interface HTMLFoliaButtonElement extends Components.FoliaButton, HTMLStencilElement {}
  var HTMLFoliaButtonElement: {
    prototype: HTMLFoliaButtonElement;
    new (): HTMLFoliaButtonElement;
  };

  interface HTMLFoliaItemElement extends Components.FoliaItem, HTMLStencilElement {}
  var HTMLFoliaItemElement: {
    prototype: HTMLFoliaItemElement;
    new (): HTMLFoliaItemElement;
  };

  interface HTMLFoliaTabElement extends Components.FoliaTab, HTMLStencilElement {}
  var HTMLFoliaTabElement: {
    prototype: HTMLFoliaTabElement;
    new (): HTMLFoliaTabElement;
  };

  interface HTMLFoliaTabsElement extends Components.FoliaTabs, HTMLStencilElement {}
  var HTMLFoliaTabsElement: {
    prototype: HTMLFoliaTabsElement;
    new (): HTMLFoliaTabsElement;
  };
  interface HTMLElementTagNameMap {
    'folia-button': HTMLFoliaButtonElement;
    'folia-item': HTMLFoliaItemElement;
    'folia-tab': HTMLFoliaTabElement;
    'folia-tabs': HTMLFoliaTabsElement;
  }
}

declare namespace LocalJSX {
  interface FoliaButton extends JSXBase.HTMLAttributes<HTMLFoliaButtonElement> {
    'color'?: 'primary' | 'accent' | 'light';
    'shape'?: 'square' | 'round';
    'size'?: 'small' | 'default' | 'large';
    /**
    * Internal props (context and connect) Inlined decorator.  Using reflectToAttr makes sure our disabled prop stays in sync with an HTML attribute.
    */
    'type'?: 'button' | 'reset' | 'success' | 'error' | 'submit' | 'loading';
  }
  interface FoliaItem extends JSXBase.HTMLAttributes<HTMLFoliaItemElement> {
    'description'?: string;
    'label'?: string;
  }
  interface FoliaTab extends JSXBase.HTMLAttributes<HTMLFoliaTabElement> {
    'active'?: boolean;
    'disabled'?: boolean;
    'label'?: string;
  }
  interface FoliaTabs extends JSXBase.HTMLAttributes<HTMLFoliaTabsElement> {
    'onChange'?: (event: CustomEvent<any>) => void;
  }

  interface IntrinsicElements {
    'folia-button': FoliaButton;
    'folia-item': FoliaItem;
    'folia-tab': FoliaTab;
    'folia-tabs': FoliaTabs;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


